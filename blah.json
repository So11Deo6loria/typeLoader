{
    "struct": {
        "LTDC_ColorTypeDef": {
            "Blue": {
                "type": "uint8_t",
                "comment": "Configures the blue value. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF."
            },
            "Green": {
                "type": "uint8_t",
                "comment": "Configures the green value. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF."
            },
            "Red": {
                "type": "uint8_t",
                "comment": "Configures the red value. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF."
            },
            "Reserved": {
                "type": "uint8_t",
                "comment": "Reserved 0xFF"
            }
        },
        "LTDC_InitTypeDef": {
            "HSPolarity": {
                "type": "uint32_t",
                "comment": "configures the horizontal synchronization polarity. This parameter can be one value of @ref LTDC_HS_POLARITY"
            },
            "VSPolarity": {
                "type": "uint32_t",
                "comment": "configures the vertical synchronization polarity. This parameter can be one value of @ref LTDC_VS_POLARITY"
            },
            "DEPolarity": {
                "type": "uint32_t",
                "comment": "configures the data enable polarity. This parameter can be one of value of @ref LTDC_DE_POLARITY"
            },
            "PCPolarity": {
                "type": "uint32_t",
                "comment": "configures the pixel clock polarity. This parameter can be one of value of @ref LTDC_PC_POLARITY"
            },
            "HorizontalSync": {
                "type": "uint32_t",
                "comment": "configures the number of Horizontal synchronization width. This parameter must be a number between Min_Data = 0x000 and Max_Data = 0xFFF."
            },
            "VerticalSync": {
                "type": "uint32_t",
                "comment": "configures the number of Vertical synchronization height. This parameter must be a number between Min_Data = 0x000 and Max_Data = 0x7FF."
            },
            "AccumulatedHBP": {
                "type": "uint32_t",
                "comment": "configures the accumulated horizontal back porch width. This parameter must be a number between Min_Data = LTDC_HorizontalSync and Max_Data = 0xFFF."
            },
            "AccumulatedVBP": {
                "type": "uint32_t",
                "comment": "configures the accumulated vertical back porch height. This parameter must be a number between Min_Data = LTDC_VerticalSync and Max_Data = 0x7FF."
            },
            "AccumulatedActiveW": {
                "type": "uint32_t",
                "comment": "configures the accumulated active width. This parameter must be a number between Min_Data = LTDC_AccumulatedHBP and Max_Data = 0xFFF."
            },
            "AccumulatedActiveH": {
                "type": "uint32_t",
                "comment": "configures the accumulated active height. This parameter must be a number between Min_Data = LTDC_AccumulatedVBP and Max_Data = 0x7FF."
            },
            "TotalWidth": {
                "type": "uint32_t",
                "comment": "configures the total width. This parameter must be a number between Min_Data = LTDC_AccumulatedActiveW and Max_Data = 0xFFF."
            },
            "TotalHeigh": {
                "type": "uint32_t",
                "comment": "configures the total height. This parameter must be a number between Min_Data = LTDC_AccumulatedActiveH and Max_Data = 0x7FF."
            },
            "Backcolor": {
                "type": "LTDC_ColorTypeDef",
                "comment": "Configures the background color."
            }
        },
        "LTDC_LayerCfgTypeDef": {
            "WindowX0": {
                "type": "uint32_t",
                "comment": "Configures the Window Horizontal Start Position. This parameter must be a number between Min_Data = 0x000 and Max_Data = 0xFFF."
            },
            "WindowX1": {
                "type": "uint32_t",
                "comment": "Configures the Window Horizontal Stop Position. This parameter must be a number between Min_Data = 0x000 and Max_Data = 0xFFF."
            },
            "WindowY0": {
                "type": "uint32_t",
                "comment": "Configures the Window vertical Start Position. This parameter must be a number between Min_Data = 0x000 and Max_Data = 0x7FF."
            },
            "WindowY1": {
                "type": "uint32_t",
                "comment": "Configures the Window vertical Stop Position. This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0x7FF."
            },
            "PixelFormat": {
                "type": "uint32_t",
                "comment": "Specifies the pixel format. This parameter can be one of value of @ref LTDC_Pixelformat"
            },
            "Alpha": {
                "type": "uint32_t",
                "comment": "Specifies the constant alpha used for blending. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF."
            },
            "Alpha0": {
                "type": "uint32_t",
                "comment": "Configures the default alpha value. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF."
            },
            "BlendingFactor1": {
                "type": "uint32_t",
                "comment": "Select the blending factor 1. This parameter can be one of value of @ref LTDC_BlendingFactor1"
            },
            "BlendingFactor2": {
                "type": "uint32_t",
                "comment": "Select the blending factor 2. This parameter can be one of value of @ref LTDC_BlendingFactor2"
            },
            "FBStartAdress": {
                "type": "uint32_t",
                "comment": "Configures the color frame buffer address"
            },
            "ImageWidth": {
                "type": "uint32_t",
                "comment": "Configures the color frame buffer line length. This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0x1FFF."
            },
            "ImageHeight": {
                "type": "uint32_t",
                "comment": "Specifies the number of line in frame buffer. This parameter must be a number between Min_Data = 0x000 and Max_Data = 0x7FF."
            },
            "Backcolor": {
                "type": "LTDC_ColorTypeDef",
                "comment": "Configures the layer background color."
            }
        },
        "MPU_Region_InitTypeDef": {
            "Enable": {
                "type": "uint8_t",
                "comment": "Specifies the status of the region. This parameter can be a value of @ref CORTEX_MPU_Region_Enable"
            },
            "Number": {
                "type": "uint8_t",
                "comment": "Specifies the number of the region to protect. This parameter can be a value of @ref CORTEX_MPU_Region_Number"
            },
            "BaseAddress": {
                "type": "uint32_t",
                "comment": "Specifies the base address of the region to protect."
            },
            "Size": {
                "type": "uint8_t",
                "comment": "Specifies the size of the region to protect. This parameter can be a value of @ref CORTEX_MPU_Region_Size"
            },
            "SubRegionDisable": {
                "type": "uint8_t",
                "comment": "Specifies the number of the subregion protection to disable. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF"
            },
            "TypeExtField": {
                "type": "uint8_t",
                "comment": "Specifies the TEX field level. This parameter can be a value of @ref CORTEX_MPU_TEX_Levels"
            },
            "AccessPermission": {
                "type": "uint8_t",
                "comment": "Specifies the region access permission type. This parameter can be a value of @ref CORTEX_MPU_Region_Permission_Attributes"
            },
            "DisableExec": {
                "type": "uint8_t",
                "comment": "Specifies the instruction access status. This parameter can be a value of @ref CORTEX_MPU_Instruction_Access"
            },
            "IsShareable": {
                "type": "uint8_t",
                "comment": "Specifies the shareability status of the protected region. This parameter can be a value of @ref CORTEX_MPU_Access_Shareable"
            },
            "IsCacheable": {
                "type": "uint8_t",
                "comment": "Specifies the cacheable status of the region protected. This parameter can be a value of @ref CORTEX_MPU_Access_Cacheable"
            },
            "IsBufferable": {
                "type": "uint8_t",
                "comment": "Specifies the bufferable status of the protected region. This parameter can be a value of @ref CORTEX_MPU_Access_Bufferable"
            }
        },
        "PWR_PVDTypeDef": {
            "PVDLevel": {
                "type": "uint32_t",
                "comment": "PVDLevel: Specifies the PVD detection level. This parameter can be a value of @ref PWR_PVD_detection_level"
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "Mode: Specifies the operating mode for the selected pins. This parameter can be a value of @ref PWR_PVD_Mode"
            }
        },
        "RCC_PLLInitTypeDef": {
            "PLLState": {
                "type": "uint32_t",
                "comment": "The new state of the PLL. This parameter can be a value of @ref RCC_PLL_Config"
            },
            "PLLSource": {
                "type": "uint32_t",
                "comment": "RCC_PLLSource: PLL entry clock source. This parameter must be a value of @ref RCC_PLL_Clock_Source"
            },
            "PLLM": {
                "type": "uint32_t",
                "comment": "PLLM: Division factor for PLL VCO input clock. This parameter must be a number between Min_Data = 0 and Max_Data = 63"
            },
            "PLLN": {
                "type": "uint32_t",
                "comment": "PLLN: Multiplication factor for PLL VCO output clock. This parameter must be a number between Min_Data = 50 and Max_Data = 432 except for STM32F411xE devices where the Min_Data = 192"
            },
            "PLLP": {
                "type": "uint32_t",
                "comment": "PLLP: Division factor for main system clock (SYSCLK). This parameter must be a value of @ref RCC_PLLP_Clock_Divider"
            },
            "PLLQ": {
                "type": "uint32_t",
                "comment": "PLLQ: Division factor for OTG FS, SDIO and RNG clocks. This parameter must be a number between Min_Data = 2 and Max_Data = 15"
            },
            "PLLR": {
                "type": "uint32_t",
                "comment": "PLLR: PLL division factor for I2S, SAI, SYSTEM, SPDIFRX clocks. This parameter is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx and STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx/STM32F413xx/STM32F423xx devices. This parameter must be a number between Min_Data = 2 and Max_Data = 7"
            }
        },
        "RCC_PLLI2SInitTypeDef": {
            "PLLI2SM": {
                "type": "uint32_t",
                "comment": "PLLM: Division factor for PLLI2S VCO input clock. This parameter must be a number between Min_Data = 2 and Max_Data = 62"
            },
            "PLLI2SN": {
                "type": "uint32_t",
                "comment": "Specifies the multiplication factor for PLLI2S VCO output clock. This parameter must be a number between Min_Data = 50 and Max_Data = 432 Except for STM32F411xE devices where the Min_Data = 192. This parameter will be used only when PLLI2S is selected as Clock Source I2S or SAI"
            },
            "PLLI2SR": {
                "type": "uint32_t",
                "comment": "Specifies the division factor for I2S clock. This parameter must be a number between Min_Data = 2 and Max_Data = 7. This parameter will be used only when PLLI2S is selected as Clock Source I2S or SAI"
            }
        },
        "RCC_PLLSAIInitTypeDef": {
            "PLLSAIN": {
                "type": "uint32_t",
                "comment": "Specifies the multiplication factor for PLLI2S VCO output clock. This parameter must be a number between Min_Data = 50 and Max_Data = 432. This parameter will be used only when PLLSAI is selected as Clock Source SAI or LTDC"
            },
            "PLLSAIP": {
                "type": "uint32_t",
                "comment": "Specifies division factor for OTG FS and SDIO clocks. This parameter is only available in STM32F469xx/STM32F479xx devices. This parameter must be a value of @ref RCCEx_PLLSAIP_Clock_Divider"
            },
            "PLLSAIQ": {
                "type": "uint32_t",
                "comment": "Specifies the division factor for SAI1 clock. This parameter must be a number between Min_Data = 2 and Max_Data = 15. This parameter will be used only when PLLSAI is selected as Clock Source SAI or LTDC"
            },
            "PLLSAIR": {
                "type": "uint32_t",
                "comment": "specifies the division factor for LTDC clock This parameter must be a number between Min_Data = 2 and Max_Data = 7. This parameter will be used only when PLLSAI is selected as Clock Source LTDC"
            }
        },
        "RCC_PeriphCLKInitTypeDef": {
            "PeriphClockSelection": {
                "type": "uint32_t",
                "comment": "The Extended Clock to be configured. This parameter can be a value of @ref RCCEx_Periph_Clock_Selection"
            },
            "PLLI2S": {
                "type": "RCC_PLLI2SInitTypeDef",
                "comment": "PLL I2S structure parameters. This parameter will be used only when PLLI2S is selected as Clock Source I2S or SAI"
            },
            "RTCClockSelection": {
                "type": "uint32_t",
                "comment": "Specifies RTC Clock Prescalers Selection. This parameter can be a value of @ref RCC_RTC_Clock_Source"
            },
            "TIMPresSelection": {
                "type": "uint8_t",
                "comment": "Specifies TIM Clock Source Selection. This parameter can be a value of @ref RCCEx_TIM_PRescaler_Selection"
            }
        },
        "DMA_InitTypeDef": {
            "Channel": {
                "type": "uint32_t",
                "comment": "Specifies the channel used for the specified stream. This parameter can be a value of @ref DMA_Channel_selection"
            },
            "Direction": {
                "type": "uint32_t",
                "comment": "Specifies if the data will be transferred from memory to peripheral, from memory to memory or from peripheral to memory. This parameter can be a value of @ref DMA_Data_transfer_direction"
            },
            "PeriphInc": {
                "type": "uint32_t",
                "comment": "Specifies whether the Peripheral address register should be incremented or not. This parameter can be a value of @ref DMA_Peripheral_incremented_mode"
            },
            "MemInc": {
                "type": "uint32_t",
                "comment": "Specifies whether the memory address register should be incremented or not. This parameter can be a value of @ref DMA_Memory_incremented_mode"
            },
            "PeriphDataAlignment": {
                "type": "uint32_t",
                "comment": "Specifies the Peripheral data width. This parameter can be a value of @ref DMA_Peripheral_data_size"
            },
            "MemDataAlignment": {
                "type": "uint32_t",
                "comment": "Specifies the Memory data width. This parameter can be a value of @ref DMA_Memory_data_size"
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "Specifies the operation mode of the DMAy Streamx. This parameter can be a value of @ref DMA_mode @note The circular buffer mode cannot be used if the memory-to-memory data transfer is configured on the selected Stream"
            },
            "Priority": {
                "type": "uint32_t",
                "comment": "Specifies the software priority for the DMAy Streamx. This parameter can be a value of @ref DMA_Priority_level"
            },
            "FIFOMode": {
                "type": "uint32_t",
                "comment": "Specifies if the FIFO mode or Direct mode will be used for the specified stream. This parameter can be a value of @ref DMA_FIFO_direct_mode @note The Direct mode (FIFO mode disabled) cannot be used if the memory-to-memory data transfer is configured on the selected stream"
            },
            "FIFOThreshold": {
                "type": "uint32_t",
                "comment": "Specifies the FIFO threshold level. This parameter can be a value of @ref DMA_FIFO_threshold_level"
            },
            "MemBurst": {
                "type": "uint32_t",
                "comment": "Specifies the Burst transfer configuration for the memory transfers. It specifies the amount of data to be transferred in a single non interruptible transaction. This parameter can be a value of @ref DMA_Memory_burst @note The burst mode is possible only if the address Increment mode is enabled."
            },
            "PeriphBurst": {
                "type": "uint32_t",
                "comment": "Specifies the Burst transfer configuration for the peripheral transfers. It specifies the amount of data to be transferred in a single non interruptible transaction. This parameter can be a value of @ref DMA_Peripheral_burst @note The burst mode is possible only if the address Increment mode is enabled."
            }
        },
        "DMA_HandleTypeDef": {
            "Init": {
                "type": "DMA_InitTypeDef",
                "comment": "DMA communication parameters"
            },
            "Lock": {
                "type": "HAL_LockTypeDef",
                "comment": "DMA locking object"
            },
            "State": {
                "type": "__IO HAL_DMA_StateTypeDef",
                "comment": "DMA transfer state"
            },
            "ErrorCode": {
                "type": "__IO uint32_t",
                "comment": "DMA Error code"
            },
            "StreamBaseAddress": {
                "type": "uint32_t",
                "comment": "DMA Stream Base Address"
            },
            "StreamIndex": {
                "type": "uint32_t",
                "comment": "DMA Stream Index"
            }
        },
        "TIM_HallSensor_InitTypeDef": {
            "IC1Polarity": {
                "type": "uint32_t",
                "comment": "Specifies the active edge of the input signal. This parameter can be a value of @ref TIM_Input_Capture_Polarity"
            },
            "IC1Prescaler": {
                "type": "uint32_t",
                "comment": "Specifies the Input Capture Prescaler. This parameter can be a value of @ref TIM_Input_Capture_Prescaler"
            },
            "IC1Filter": {
                "type": "uint32_t",
                "comment": "Specifies the input capture filter. This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            },
            "Commutation_Delay": {
                "type": "uint32_t",
                "comment": "Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF"
            }
        },
        "CAN_InitTypeDef": {
            "Prescaler": {
                "type": "uint32_t",
                "comment": "Specifies the length of a time quantum. This parameter must be a number between Min_Data = 1 and Max_Data = 1024."
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "Specifies the CAN operating mode. This parameter can be a value of @ref CAN_operating_mode"
            },
            "SyncJumpWidth": {
                "type": "uint32_t",
                "comment": "Specifies the maximum number of time quanta the CAN hardware is allowed to lengthen or shorten a bit to perform resynchronization. This parameter can be a value of @ref CAN_synchronisation_jump_width"
            },
            "TimeSeg1": {
                "type": "uint32_t",
                "comment": "Specifies the number of time quanta in Bit Segment 1. This parameter can be a value of @ref CAN_time_quantum_in_bit_segment_1"
            },
            "TimeSeg2": {
                "type": "uint32_t",
                "comment": "Specifies the number of time quanta in Bit Segment 2. This parameter can be a value of @ref CAN_time_quantum_in_bit_segment_2"
            },
            "TimeTriggeredMode": {
                "type": "FunctionalState",
                "comment": "Enable or disable the time triggered communication mode. This parameter can be set to ENABLE or DISABLE."
            },
            "AutoBusOff": {
                "type": "FunctionalState",
                "comment": "Enable or disable the automatic bus-off management. This parameter can be set to ENABLE or DISABLE."
            },
            "AutoWakeUp": {
                "type": "FunctionalState",
                "comment": "Enable or disable the automatic wake-up mode. This parameter can be set to ENABLE or DISABLE."
            },
            "AutoRetransmission": {
                "type": "FunctionalState",
                "comment": "Enable or disable the non-automatic retransmission mode. This parameter can be set to ENABLE or DISABLE."
            },
            "ReceiveFifoLocked": {
                "type": "FunctionalState",
                "comment": "Enable or disable the Receive FIFO Locked mode. This parameter can be set to ENABLE or DISABLE."
            },
            "TransmitFifoPriority": {
                "type": "FunctionalState",
                "comment": "Enable or disable the transmit FIFO priority. This parameter can be set to ENABLE or DISABLE."
            }
        },
        "CAN_FilterTypeDef": {
            "FilterIdHigh": {
                "type": "uint32_t",
                "comment": "Specifies the filter identification number (MSBs for a 32-bit configuration, first one for a 16-bit configuration). This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF."
            },
            "FilterIdLow": {
                "type": "uint32_t",
                "comment": "Specifies the filter identification number (LSBs for a 32-bit configuration, second one for a 16-bit configuration). This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF."
            },
            "FilterMaskIdHigh": {
                "type": "uint32_t",
                "comment": "Specifies the filter mask number or identification number, according to the mode (MSBs for a 32-bit configuration, first one for a 16-bit configuration). This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF."
            },
            "FilterMaskIdLow": {
                "type": "uint32_t",
                "comment": "Specifies the filter mask number or identification number, according to the mode (LSBs for a 32-bit configuration, second one for a 16-bit configuration). This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF."
            },
            "FilterFIFOAssignment": {
                "type": "uint32_t",
                "comment": "Specifies the FIFO (0 or 1U) which will be assigned to the filter. This parameter can be a value of @ref CAN_filter_FIFO"
            },
            "FilterBank": {
                "type": "uint32_t",
                "comment": "Specifies the filter bank which will be initialized. For single CAN instance(14 dedicated filter banks), this parameter must be a number between Min_Data = 0 and Max_Data = 13. For dual CAN instances(28 filter banks shared), this parameter must be a number between Min_Data = 0 and Max_Data = 27."
            },
            "FilterMode": {
                "type": "uint32_t",
                "comment": "Specifies the filter mode to be initialized. This parameter can be a value of @ref CAN_filter_mode"
            },
            "FilterScale": {
                "type": "uint32_t",
                "comment": "Specifies the filter scale. This parameter can be a value of @ref CAN_filter_scale"
            },
            "FilterActivation": {
                "type": "uint32_t",
                "comment": "Enable or disable the filter. This parameter can be a value of @ref CAN_filter_activation"
            },
            "SlaveStartFilterBank": {
                "type": "uint32_t",
                "comment": "Select the start filter bank for the slave CAN instance. For single CAN instances, this parameter is meaningless. For dual CAN instances, all filter banks with lower index are assigned to master CAN instance, whereas all filter banks with greater index are assigned to slave CAN instance. This parameter must be a number between Min_Data = 0 and Max_Data = 27."
            }
        },
        "CAN_TxHeaderTypeDef": {
            "StdId": {
                "type": "uint32_t",
                "comment": "Specifies the standard identifier. This parameter must be a number between Min_Data = 0 and Max_Data = 0x7FF."
            },
            "ExtId": {
                "type": "uint32_t",
                "comment": "Specifies the extended identifier. This parameter must be a number between Min_Data = 0 and Max_Data = 0x1FFFFFFF."
            },
            "IDE": {
                "type": "uint32_t",
                "comment": "Specifies the type of identifier for the message that will be transmitted. This parameter can be a value of @ref CAN_identifier_type"
            },
            "RTR": {
                "type": "uint32_t",
                "comment": "Specifies the type of frame for the message that will be transmitted. This parameter can be a value of @ref CAN_remote_transmission_request"
            },
            "DLC": {
                "type": "uint32_t",
                "comment": "Specifies the length of the frame that will be transmitted. This parameter must be a number between Min_Data = 0 and Max_Data = 8."
            },
            "TransmitGlobalTime": {
                "type": "FunctionalState",
                "comment": "Specifies whether the timestamp counter value captured on start of frame transmission, is sent in DATA6 and DATA7 replacing pData[6] and pData[7]. @note: Time Triggered Communication Mode must be enabled. @note: DLC must be programmed as 8 bytes, in order these 2 bytes are sent. This parameter can be set to ENABLE or DISABLE."
            }
        },
        "CAN_RxHeaderTypeDef": {
            "StdId": {
                "type": "uint32_t",
                "comment": "Specifies the standard identifier. This parameter must be a number between Min_Data = 0 and Max_Data = 0x7FF."
            },
            "ExtId": {
                "type": "uint32_t",
                "comment": "Specifies the extended identifier. This parameter must be a number between Min_Data = 0 and Max_Data = 0x1FFFFFFF."
            },
            "IDE": {
                "type": "uint32_t",
                "comment": "Specifies the type of identifier for the message that will be transmitted. This parameter can be a value of @ref CAN_identifier_type"
            },
            "RTR": {
                "type": "uint32_t",
                "comment": "Specifies the type of frame for the message that will be transmitted. This parameter can be a value of @ref CAN_remote_transmission_request"
            },
            "DLC": {
                "type": "uint32_t",
                "comment": "Specifies the length of the frame that will be transmitted. This parameter must be a number between Min_Data = 0 and Max_Data = 8."
            },
            "Timestamp": {
                "type": "uint32_t",
                "comment": "Specifies the timestamp counter value captured on start of frame reception. @note: Time Triggered Communication Mode must be enabled. This parameter must be a number between Min_Data = 0 and Max_Data = 0xFFFF."
            },
            "FilterMatchIndex": {
                "type": "uint32_t",
                "comment": "Specifies the index of matching acceptance filter element. This parameter must be a number between Min_Data = 0 and Max_Data = 0xFF."
            }
        },
        "CAN_HandleTypeDef": {
            "Init": {
                "type": "CAN_InitTypeDef",
                "comment": "CAN required parameters"
            },
            "State": {
                "type": "__IO HAL_CAN_StateTypeDef",
                "comment": "CAN communication state"
            },
            "ErrorCode": {
                "type": "__IO uint32_t",
                "comment": "CAN Error code. This parameter can be a value of @ref CAN_Error_Code"
            }
        },
        "DMA2D_CLUTCfgTypeDef": {
            "CLUTColorMode": {
                "type": "uint32_t",
                "comment": "Configures the DMA2D CLUT color mode. This parameter can be one value of @ref DMA2D_CLUT_CM."
            },
            "Size": {
                "type": "uint32_t",
                "comment": "Configures the DMA2D CLUT size. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF."
            }
        },
        "DMA2D_InitTypeDef": {
            "Mode": {
                "type": "uint32_t",
                "comment": "Configures the DMA2D transfer mode. This parameter can be one value of @ref DMA2D_Mode."
            },
            "ColorMode": {
                "type": "uint32_t",
                "comment": "Configures the color format of the output image. This parameter can be one value of @ref DMA2D_Output_Color_Mode."
            },
            "OutputOffset": {
                "type": "uint32_t",
                "comment": "Specifies the Offset value. This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0x3FFF."
            }
        },
        "DMA2D_LayerCfgTypeDef": {
            "InputOffset": {
                "type": "uint32_t",
                "comment": "Configures the DMA2D foreground or background offset. This parameter must be a number between Min_Data = 0x0000 and Max_Data = 0x3FFF."
            },
            "InputColorMode": {
                "type": "uint32_t",
                "comment": "Configures the DMA2D foreground or background color mode. This parameter can be one value of @ref DMA2D_Input_Color_Mode."
            },
            "AlphaMode": {
                "type": "uint32_t",
                "comment": "Configures the DMA2D foreground or background alpha mode. This parameter can be one value of @ref DMA2D_Alpha_Mode."
            },
            "InputAlpha": {
                "type": "uint32_t",
                "comment": "Specifies the DMA2D foreground or background alpha value and color value in case of A8 or A4 color mode. This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF except for the color modes detailed below. @note In case of A8 or A4 color mode (ARGB), this parameter must be a number between Min_Data = 0x00000000 and Max_Data = 0xFFFFFFFF where - InputAlpha[24:31] is the alpha value ALPHA[0:7] - InputAlpha[16:23] is the red value RED[0:7] - InputAlpha[8:15] is the green value GREEN[0:7] - InputAlpha[0:7] is the blue value BLUE[0:7]."
            }
        },
        "DMA2D_HandleTypeDef": {
            "Init": {
                "type": "DMA2D_InitTypeDef",
                "comment": "DMA2D communication parameters."
            },
            "Lock": {
                "type": "HAL_LockTypeDef",
                "comment": "DMA2D lock."
            },
            "State": {
                "type": "__IO HAL_DMA2D_StateTypeDef",
                "comment": "DMA2D transfer state."
            },
            "ErrorCode": {
                "type": "__IO uint32_t",
                "comment": "DMA2D error code."
            }
        },
        "GPIO_InitTypeDef": {
            "Pin": {
                "type": "uint32_t",
                "comment": "Specifies the GPIO pins to be configured. This parameter can be any value of @ref GPIO_pins_define"
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "Specifies the operating mode for the selected pins. This parameter can be a value of @ref GPIO_mode_define"
            },
            "Pull": {
                "type": "uint32_t",
                "comment": "Specifies the Pull-up or Pull-Down activation for the selected pins. This parameter can be a value of @ref GPIO_pull_define"
            },
            "Speed": {
                "type": "uint32_t",
                "comment": "Specifies the speed for the selected pins. This parameter can be a value of @ref GPIO_speed_define"
            },
            "Alternate": {
                "type": "uint32_t",
                "comment": "Peripheral to be connected to the selected pins. This parameter can be a value of @ref GPIO_Alternate_function_selection"
            }
        },
        "CRC_HandleTypeDef": {
            "Lock": {
                "type": "HAL_LockTypeDef",
                "comment": "CRC Locking object"
            },
            "State": {
                "type": "__IO HAL_CRC_StateTypeDef",
                "comment": "CRC communication state"
            }
        },
        "DSI_InitTypeDef": {
            "AutomaticClockLaneControl": {
                "type": "uint32_t",
                "comment": "Automatic clock lane control This parameter can be any value of @ref DSI_Automatic_Clk_Lane_Control"
            },
            "TXEscapeCkdiv": {
                "type": "uint32_t",
                "comment": "TX Escape clock division The values 0 and 1 stop the TX_ESC clock generation"
            },
            "NumberOfLanes": {
                "type": "uint32_t",
                "comment": "Number of lanes This parameter can be any value of @ref DSI_Number_Of_Lanes"
            }
        },
        "DSI_PLLInitTypeDef": {
            "PLLNDIV": {
                "type": "uint32_t",
                "comment": "PLL Loop Division Factor This parameter must be a value between 10 and 125"
            },
            "PLLIDF": {
                "type": "uint32_t",
                "comment": "PLL Input Division Factor This parameter can be any value of @ref DSI_PLL_IDF"
            },
            "PLLODF": {
                "type": "uint32_t",
                "comment": "PLL Output Division Factor This parameter can be any value of @ref DSI_PLL_ODF"
            }
        },
        "DSI_VidCfgTypeDef": {
            "VirtualChannelID": {
                "type": "uint32_t",
                "comment": "Virtual channel ID"
            },
            "ColorCoding": {
                "type": "uint32_t",
                "comment": "Color coding for LTDC interface This parameter can be any value of @ref DSI_Color_Coding"
            },
            "LooselyPacked": {
                "type": "uint32_t",
                "comment": "Enable or disable loosely packed stream (needed only when using 18-bit configuration). This parameter can be any value of @ref DSI_LooselyPacked"
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "Video mode type This parameter can be any value of @ref DSI_Video_Mode_Type"
            },
            "PacketSize": {
                "type": "uint32_t",
                "comment": "Video packet size"
            },
            "NumberOfChunks": {
                "type": "uint32_t",
                "comment": "Number of chunks"
            },
            "NullPacketSize": {
                "type": "uint32_t",
                "comment": "Null packet size"
            },
            "HSPolarity": {
                "type": "uint32_t",
                "comment": "HSYNC pin polarity This parameter can be any value of @ref DSI_HSYNC_Polarity"
            },
            "VSPolarity": {
                "type": "uint32_t",
                "comment": "VSYNC pin polarity This parameter can be any value of @ref DSI_VSYNC_Active_Polarity"
            },
            "DEPolarity": {
                "type": "uint32_t",
                "comment": "Data Enable pin polarity This parameter can be any value of @ref DSI_DATA_ENABLE_Polarity"
            },
            "HorizontalSyncActive": {
                "type": "uint32_t",
                "comment": "Horizontal synchronism active duration (in lane byte clock cycles)"
            },
            "HorizontalBackPorch": {
                "type": "uint32_t",
                "comment": "Horizontal back-porch duration (in lane byte clock cycles)"
            },
            "HorizontalLine": {
                "type": "uint32_t",
                "comment": "Horizontal line duration (in lane byte clock cycles)"
            },
            "VerticalSyncActive": {
                "type": "uint32_t",
                "comment": "Vertical synchronism active duration"
            },
            "VerticalBackPorch": {
                "type": "uint32_t",
                "comment": "Vertical back-porch duration"
            },
            "VerticalFrontPorch": {
                "type": "uint32_t",
                "comment": "Vertical front-porch duration"
            },
            "VerticalActive": {
                "type": "uint32_t",
                "comment": "Vertical active duration"
            },
            "LPCommandEnable": {
                "type": "uint32_t",
                "comment": "Low-power command enable This parameter can be any value of @ref DSI_LP_Command"
            },
            "LPLargestPacketSize": {
                "type": "uint32_t",
                "comment": "The size, in bytes, of the low power largest packet that can fit in a line during VSA, VBP and VFP regions"
            },
            "LPVACTLargestPacketSize": {
                "type": "uint32_t",
                "comment": "The size, in bytes, of the low power largest packet that can fit in a line during VACT region"
            },
            "LPHorizontalFrontPorchEnable": {
                "type": "uint32_t",
                "comment": "Low-power horizontal front-porch enable This parameter can be any value of @ref DSI_LP_HFP"
            },
            "LPHorizontalBackPorchEnable": {
                "type": "uint32_t",
                "comment": "Low-power horizontal back-porch enable This parameter can be any value of @ref DSI_LP_HBP"
            },
            "LPVerticalActiveEnable": {
                "type": "uint32_t",
                "comment": "Low-power vertical active enable This parameter can be any value of @ref DSI_LP_VACT"
            },
            "LPVerticalFrontPorchEnable": {
                "type": "uint32_t",
                "comment": "Low-power vertical front-porch enable This parameter can be any value of @ref DSI_LP_VFP"
            },
            "LPVerticalBackPorchEnable": {
                "type": "uint32_t",
                "comment": "Low-power vertical back-porch enable This parameter can be any value of @ref DSI_LP_VBP"
            },
            "LPVerticalSyncActiveEnable": {
                "type": "uint32_t",
                "comment": "Low-power vertical sync active enable This parameter can be any value of @ref DSI_LP_VSYNC"
            },
            "FrameBTAAcknowledgeEnable": {
                "type": "uint32_t",
                "comment": "Frame bus-turn-around acknowledge enable This parameter can be any value of @ref DSI_FBTA_acknowledge"
            }
        },
        "DSI_CmdCfgTypeDef": {
            "VirtualChannelID": {
                "type": "uint32_t",
                "comment": "Virtual channel ID"
            },
            "ColorCoding": {
                "type": "uint32_t",
                "comment": "Color coding for LTDC interface This parameter can be any value of @ref DSI_Color_Coding"
            },
            "CommandSize": {
                "type": "uint32_t",
                "comment": "Maximum allowed size for an LTDC write memory command, measured in pixels. This parameter can be any value between 0x00 and 0xFFFFU"
            },
            "TearingEffectSource": {
                "type": "uint32_t",
                "comment": "Tearing effect source This parameter can be any value of @ref DSI_TearingEffectSource"
            },
            "TearingEffectPolarity": {
                "type": "uint32_t",
                "comment": "Tearing effect pin polarity This parameter can be any value of @ref DSI_TearingEffectPolarity"
            },
            "HSPolarity": {
                "type": "uint32_t",
                "comment": "HSYNC pin polarity This parameter can be any value of @ref DSI_HSYNC_Polarity"
            },
            "VSPolarity": {
                "type": "uint32_t",
                "comment": "VSYNC pin polarity This parameter can be any value of @ref DSI_VSYNC_Active_Polarity"
            },
            "DEPolarity": {
                "type": "uint32_t",
                "comment": "Data Enable pin polarity This parameter can be any value of @ref DSI_DATA_ENABLE_Polarity"
            },
            "VSyncPol": {
                "type": "uint32_t",
                "comment": "VSync edge on which the LTDC is halted This parameter can be any value of @ref DSI_Vsync_Polarity"
            },
            "AutomaticRefresh": {
                "type": "uint32_t",
                "comment": "Automatic refresh mode This parameter can be any value of @ref DSI_AutomaticRefresh"
            },
            "TEAcknowledgeRequest": {
                "type": "uint32_t",
                "comment": "Tearing Effect Acknowledge Request Enable This parameter can be any value of @ref DSI_TE_AcknowledgeRequest"
            }
        },
        "DSI_LPCmdTypeDef": {
            "LPGenShortWriteNoP": {
                "type": "uint32_t",
                "comment": "Generic Short Write Zero parameters Transmission This parameter can be any value of @ref DSI_LP_LPGenShortWriteNoP"
            },
            "LPGenShortWriteOneP": {
                "type": "uint32_t",
                "comment": "Generic Short Write One parameter Transmission This parameter can be any value of @ref DSI_LP_LPGenShortWriteOneP"
            },
            "LPGenShortWriteTwoP": {
                "type": "uint32_t",
                "comment": "Generic Short Write Two parameters Transmission This parameter can be any value of @ref DSI_LP_LPGenShortWriteTwoP"
            },
            "LPGenShortReadNoP": {
                "type": "uint32_t",
                "comment": "Generic Short Read Zero parameters Transmission This parameter can be any value of @ref DSI_LP_LPGenShortReadNoP"
            },
            "LPGenShortReadOneP": {
                "type": "uint32_t",
                "comment": "Generic Short Read One parameter Transmission This parameter can be any value of @ref DSI_LP_LPGenShortReadOneP"
            },
            "LPGenShortReadTwoP": {
                "type": "uint32_t",
                "comment": "Generic Short Read Two parameters Transmission This parameter can be any value of @ref DSI_LP_LPGenShortReadTwoP"
            },
            "LPGenLongWrite": {
                "type": "uint32_t",
                "comment": "Generic Long Write Transmission This parameter can be any value of @ref DSI_LP_LPGenLongWrite"
            },
            "LPDcsShortWriteNoP": {
                "type": "uint32_t",
                "comment": "DCS Short Write Zero parameters Transmission This parameter can be any value of @ref DSI_LP_LPDcsShortWriteNoP"
            },
            "LPDcsShortWriteOneP": {
                "type": "uint32_t",
                "comment": "DCS Short Write One parameter Transmission This parameter can be any value of @ref DSI_LP_LPDcsShortWriteOneP"
            },
            "LPDcsShortReadNoP": {
                "type": "uint32_t",
                "comment": "DCS Short Read Zero parameters Transmission This parameter can be any value of @ref DSI_LP_LPDcsShortReadNoP"
            },
            "LPDcsLongWrite": {
                "type": "uint32_t",
                "comment": "DCS Long Write Transmission This parameter can be any value of @ref DSI_LP_LPDcsLongWrite"
            },
            "LPMaxReadPacket": {
                "type": "uint32_t",
                "comment": "Maximum Read Packet Size Transmission This parameter can be any value of @ref DSI_LP_LPMaxReadPacket"
            },
            "AcknowledgeRequest": {
                "type": "uint32_t",
                "comment": "Acknowledge Request Enable This parameter can be any value of @ref DSI_AcknowledgeRequest"
            }
        },
        "DSI_PHY_TimerTypeDef": {
            "ClockLaneHS2LPTime": {
                "type": "uint32_t",
                "comment": "The maximum time that the D-PHY clock lane takes to go from high-speed to low-power transmission"
            },
            "ClockLaneLP2HSTime": {
                "type": "uint32_t",
                "comment": "The maximum time that the D-PHY clock lane takes to go from low-power to high-speed transmission"
            },
            "DataLaneHS2LPTime": {
                "type": "uint32_t",
                "comment": "The maximum time that the D-PHY data lanes takes to go from high-speed to low-power transmission"
            },
            "DataLaneLP2HSTime": {
                "type": "uint32_t",
                "comment": "The maximum time that the D-PHY data lanes takes to go from low-power to high-speed transmission"
            },
            "DataLaneMaxReadTime": {
                "type": "uint32_t",
                "comment": "The maximum time required to perform a read command"
            },
            "StopWaitTime": {
                "type": "uint32_t",
                "comment": "The minimum wait period to request a High-Speed transmission after the Stop state"
            }
        },
        "DSI_HOST_TimeoutTypeDef": {
            "TimeoutCkdiv": {
                "type": "uint32_t",
                "comment": "Time-out clock division"
            },
            "HighSpeedTransmissionTimeout": {
                "type": "uint32_t",
                "comment": "High-speed transmission time-out"
            },
            "LowPowerReceptionTimeout": {
                "type": "uint32_t",
                "comment": "Low-power reception time-out"
            },
            "HighSpeedReadTimeout": {
                "type": "uint32_t",
                "comment": "High-speed read time-out"
            },
            "LowPowerReadTimeout": {
                "type": "uint32_t",
                "comment": "Low-power read time-out"
            },
            "HighSpeedWriteTimeout": {
                "type": "uint32_t",
                "comment": "High-speed write time-out"
            },
            "HighSpeedWritePrespMode": {
                "type": "uint32_t",
                "comment": "High-speed write presp mode This parameter can be any value of @ref DSI_HS_PrespMode"
            },
            "LowPowerWriteTimeout": {
                "type": "uint32_t",
                "comment": "Low-speed write time-out"
            },
            "BTATimeout": {
                "type": "uint32_t",
                "comment": "BTA time-out"
            }
        },
        "SPI_InitTypeDef": {
            "Mode": {
                "type": "uint32_t",
                "comment": "Specifies the SPI operating mode. This parameter can be a value of @ref SPI_Mode"
            },
            "Direction": {
                "type": "uint32_t",
                "comment": "Specifies the SPI bidirectional mode state. This parameter can be a value of @ref SPI_Direction"
            },
            "DataSize": {
                "type": "uint32_t",
                "comment": "Specifies the SPI data size. This parameter can be a value of @ref SPI_Data_Size"
            },
            "CLKPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the serial clock steady state. This parameter can be a value of @ref SPI_Clock_Polarity"
            },
            "CLKPhase": {
                "type": "uint32_t",
                "comment": "Specifies the clock active edge for the bit capture. This parameter can be a value of @ref SPI_Clock_Phase"
            },
            "NSS": {
                "type": "uint32_t",
                "comment": "Specifies whether the NSS signal is managed by hardware (NSS pin) or by software using the SSI bit. This parameter can be a value of @ref SPI_Slave_Select_management"
            },
            "BaudRatePrescaler": {
                "type": "uint32_t",
                "comment": "Specifies the Baud Rate prescaler value which will be used to configure the transmit and receive SCK clock. This parameter can be a value of @ref SPI_BaudRate_Prescaler @note The communication clock is derived from the master clock. The slave clock does not need to be set."
            },
            "FirstBit": {
                "type": "uint32_t",
                "comment": "Specifies whether data transfers start from MSB or LSB bit. This parameter can be a value of @ref SPI_MSB_LSB_transmission"
            },
            "TIMode": {
                "type": "uint32_t",
                "comment": "Specifies if the TI mode is enabled or not. This parameter can be a value of @ref SPI_TI_mode"
            },
            "CRCCalculation": {
                "type": "uint32_t",
                "comment": "Specifies if the CRC calculation is enabled or not. This parameter can be a value of @ref SPI_CRC_Calculation"
            },
            "CRCPolynomial": {
                "type": "uint32_t",
                "comment": "Specifies the polynomial used for the CRC calculation. This parameter must be an odd number between Min_Data = 1 and Max_Data = 65535"
            }
        },
        "SPI_HandleTypeDef": {
            "Init": {
                "type": "SPI_InitTypeDef",
                "comment": "SPI communication parameters"
            },
            "TxXferSize": {
                "type": "uint16_t",
                "comment": "SPI Tx Transfer size"
            },
            "TxXferCount": {
                "type": "__IO uint16_t",
                "comment": "SPI Tx Transfer Counter"
            },
            "RxXferSize": {
                "type": "uint16_t",
                "comment": "SPI Rx Transfer size"
            },
            "RxXferCount": {
                "type": "__IO uint16_t",
                "comment": "SPI Rx Transfer Counter"
            },
            "Lock": {
                "type": "HAL_LockTypeDef",
                "comment": "Locking object"
            },
            "State": {
                "type": "__IO HAL_SPI_StateTypeDef",
                "comment": "SPI communication state"
            },
            "ErrorCode": {
                "type": "__IO uint32_t",
                "comment": "SPI Error code"
            }
        },
        "TIM_Base_InitTypeDef": {
            "Prescaler": {
                "type": "uint32_t",
                "comment": "Specifies the prescaler value used to divide the TIM clock. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF"
            },
            "CounterMode": {
                "type": "uint32_t",
                "comment": "Specifies the counter mode. This parameter can be a value of @ref TIM_Counter_Mode"
            },
            "Period": {
                "type": "uint32_t",
                "comment": "Specifies the period value to be loaded into the active Auto-Reload Register at the next update event. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF."
            },
            "ClockDivision": {
                "type": "uint32_t",
                "comment": "Specifies the clock division. This parameter can be a value of @ref TIM_ClockDivision"
            },
            "RepetitionCounter": {
                "type": "uint32_t",
                "comment": "Specifies the repetition counter value. Each time the RCR downcounter reaches zero, an update event is generated and counting restarts from the RCR value (N). This means in PWM mode that (N+1) corresponds to: - the number of PWM periods in edge-aligned mode - the number of half PWM period in center-aligned mode GP timers: this parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF. Advanced timers: this parameter must be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF."
            },
            "AutoReloadPreload": {
                "type": "uint32_t",
                "comment": "Specifies the auto-reload preload. This parameter can be a value of @ref TIM_AutoReloadPreload"
            }
        },
        "TIM_OC_InitTypeDef": {
            "OCMode": {
                "type": "uint32_t",
                "comment": "Specifies the TIM mode. This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes"
            },
            "Pulse": {
                "type": "uint32_t",
                "comment": "Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF"
            },
            "OCPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the output polarity. This parameter can be a value of @ref TIM_Output_Compare_Polarity"
            },
            "OCNPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the complementary output polarity. This parameter can be a value of @ref TIM_Output_Compare_N_Polarity @note This parameter is valid only for timer instances supporting break feature."
            },
            "OCFastMode": {
                "type": "uint32_t",
                "comment": "Specifies the Fast mode state. This parameter can be a value of @ref TIM_Output_Fast_State @note This parameter is valid only in PWM1 and PWM2 mode."
            },
            "OCIdleState": {
                "type": "uint32_t",
                "comment": "Specifies the TIM Output Compare pin state during Idle state. This parameter can be a value of @ref TIM_Output_Compare_Idle_State @note This parameter is valid only for timer instances supporting break feature."
            },
            "OCNIdleState": {
                "type": "uint32_t",
                "comment": "Specifies the TIM Output Compare pin state during Idle state. This parameter can be a value of @ref TIM_Output_Compare_N_Idle_State @note This parameter is valid only for timer instances supporting break feature."
            }
        },
        "TIM_OnePulse_InitTypeDef": {
            "OCMode": {
                "type": "uint32_t",
                "comment": "Specifies the TIM mode. This parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes"
            },
            "Pulse": {
                "type": "uint32_t",
                "comment": "Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF"
            },
            "OCPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the output polarity. This parameter can be a value of @ref TIM_Output_Compare_Polarity"
            },
            "OCNPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the complementary output polarity. This parameter can be a value of @ref TIM_Output_Compare_N_Polarity @note This parameter is valid only for timer instances supporting break feature."
            },
            "OCIdleState": {
                "type": "uint32_t",
                "comment": "Specifies the TIM Output Compare pin state during Idle state. This parameter can be a value of @ref TIM_Output_Compare_Idle_State @note This parameter is valid only for timer instances supporting break feature."
            },
            "OCNIdleState": {
                "type": "uint32_t",
                "comment": "Specifies the TIM Output Compare pin state during Idle state. This parameter can be a value of @ref TIM_Output_Compare_N_Idle_State @note This parameter is valid only for timer instances supporting break feature."
            },
            "ICPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the active edge of the input signal. This parameter can be a value of @ref TIM_Input_Capture_Polarity"
            },
            "ICSelection": {
                "type": "uint32_t",
                "comment": "Specifies the input. This parameter can be a value of @ref TIM_Input_Capture_Selection"
            },
            "ICFilter": {
                "type": "uint32_t",
                "comment": "Specifies the input capture filter. This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            }
        },
        "TIM_IC_InitTypeDef": {
            "ICPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the active edge of the input signal. This parameter can be a value of @ref TIM_Input_Capture_Polarity"
            },
            "ICSelection": {
                "type": "uint32_t",
                "comment": "Specifies the input. This parameter can be a value of @ref TIM_Input_Capture_Selection"
            },
            "ICPrescaler": {
                "type": "uint32_t",
                "comment": "Specifies the Input Capture Prescaler. This parameter can be a value of @ref TIM_Input_Capture_Prescaler"
            },
            "ICFilter": {
                "type": "uint32_t",
                "comment": "Specifies the input capture filter. This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            }
        },
        "TIM_Encoder_InitTypeDef": {
            "EncoderMode": {
                "type": "uint32_t",
                "comment": "Specifies the active edge of the input signal. This parameter can be a value of @ref TIM_Encoder_Mode"
            },
            "IC1Polarity": {
                "type": "uint32_t",
                "comment": "Specifies the active edge of the input signal. This parameter can be a value of @ref TIM_Encoder_Input_Polarity"
            },
            "IC1Selection": {
                "type": "uint32_t",
                "comment": "Specifies the input. This parameter can be a value of @ref TIM_Input_Capture_Selection"
            },
            "IC1Prescaler": {
                "type": "uint32_t",
                "comment": "Specifies the Input Capture Prescaler. This parameter can be a value of @ref TIM_Input_Capture_Prescaler"
            },
            "IC1Filter": {
                "type": "uint32_t",
                "comment": "Specifies the input capture filter. This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            },
            "IC2Polarity": {
                "type": "uint32_t",
                "comment": "Specifies the active edge of the input signal. This parameter can be a value of @ref TIM_Encoder_Input_Polarity"
            },
            "IC2Selection": {
                "type": "uint32_t",
                "comment": "Specifies the input. This parameter can be a value of @ref TIM_Input_Capture_Selection"
            },
            "IC2Prescaler": {
                "type": "uint32_t",
                "comment": "Specifies the Input Capture Prescaler. This parameter can be a value of @ref TIM_Input_Capture_Prescaler"
            },
            "IC2Filter": {
                "type": "uint32_t",
                "comment": "Specifies the input capture filter. This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            }
        },
        "TIM_ClockConfigTypeDef": {
            "ClockSource": {
                "type": "uint32_t",
                "comment": "TIM clock sources This parameter can be a value of @ref TIM_Clock_Source"
            },
            "ClockPolarity": {
                "type": "uint32_t",
                "comment": "TIM clock polarity This parameter can be a value of @ref TIM_Clock_Polarity"
            },
            "ClockPrescaler": {
                "type": "uint32_t",
                "comment": "TIM clock prescaler This parameter can be a value of @ref TIM_Clock_Prescaler"
            },
            "ClockFilter": {
                "type": "uint32_t",
                "comment": "TIM clock filter This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            }
        },
        "TIM_ClearInputConfigTypeDef": {
            "ClearInputState": {
                "type": "uint32_t",
                "comment": "TIM clear Input state This parameter can be ENABLE or DISABLE"
            },
            "ClearInputSource": {
                "type": "uint32_t",
                "comment": "TIM clear Input sources This parameter can be a value of @ref TIM_ClearInput_Source"
            },
            "ClearInputPolarity": {
                "type": "uint32_t",
                "comment": "TIM Clear Input polarity This parameter can be a value of @ref TIM_ClearInput_Polarity"
            },
            "ClearInputPrescaler": {
                "type": "uint32_t",
                "comment": "TIM Clear Input prescaler This parameter must be 0: When OCRef clear feature is used with ETR source, ETR prescaler must be off"
            },
            "ClearInputFilter": {
                "type": "uint32_t",
                "comment": "TIM Clear Input filter This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            }
        },
        "TIM_MasterConfigTypeDef": {
            "MasterOutputTrigger": {
                "type": "uint32_t",
                "comment": "Trigger output (TRGO) selection This parameter can be a value of @ref TIM_Master_Mode_Selection"
            },
            "MasterSlaveMode": {
                "type": "uint32_t",
                "comment": "Master/slave mode selection This parameter can be a value of @ref TIM_Master_Slave_Mode @note When the Master/slave mode is enabled, the effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is not mandatory in case of timer synchronization mode."
            }
        },
        "TIM_SlaveConfigTypeDef": {
            "SlaveMode": {
                "type": "uint32_t",
                "comment": "Slave mode selection This parameter can be a value of @ref TIM_Slave_Mode"
            },
            "InputTrigger": {
                "type": "uint32_t",
                "comment": "Input Trigger source This parameter can be a value of @ref TIM_Trigger_Selection"
            },
            "TriggerPolarity": {
                "type": "uint32_t",
                "comment": "Input Trigger polarity This parameter can be a value of @ref TIM_Trigger_Polarity"
            },
            "TriggerPrescaler": {
                "type": "uint32_t",
                "comment": "Input trigger prescaler This parameter can be a value of @ref TIM_Trigger_Prescaler"
            },
            "TriggerFilter": {
                "type": "uint32_t",
                "comment": "Input trigger filter This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            }
        },
        "TIM_BreakDeadTimeConfigTypeDef": {
            "OffStateRunMode": {
                "type": "uint32_t",
                "comment": "TIM off state in run mode, This parameter can be a value of @ref TIM_OSSR_Off_State_Selection_for_Run_mode_state"
            },
            "OffStateIDLEMode": {
                "type": "uint32_t",
                "comment": "TIM off state in IDLE mode, This parameter can be a value of @ref TIM_OSSI_Off_State_Selection_for_Idle_mode_state"
            },
            "LockLevel": {
                "type": "uint32_t",
                "comment": "TIM Lock level, This parameter can be a value of @ref TIM_Lock_level"
            },
            "DeadTime": {
                "type": "uint32_t",
                "comment": "TIM dead Time, This parameter can be a number between Min_Data = 0x00 and Max_Data = 0xFF"
            },
            "BreakState": {
                "type": "uint32_t",
                "comment": "TIM Break State, This parameter can be a value of @ref TIM_Break_Input_enable_disable"
            },
            "BreakPolarity": {
                "type": "uint32_t",
                "comment": "TIM Break input polarity, This parameter can be a value of @ref TIM_Break_Polarity"
            },
            "BreakFilter": {
                "type": "uint32_t",
                "comment": "Specifies the break input filter.This parameter can be a number between Min_Data = 0x0 and Max_Data = 0xF"
            },
            "AutomaticOutput": {
                "type": "uint32_t",
                "comment": "TIM Automatic Output Enable state, This parameter can be a value of @ref TIM_AOE_Bit_Set_Reset"
            }
        },
        "UART_InitTypeDef": {
            "BaudRate": {
                "type": "uint32_t",
                "comment": "This member configures the UART communication baud rate. The baud rate is computed using the following formula: - IntegerDivider = ((PCLKx) / (8 * (OVR8+1) * (huart->Init.BaudRate))) - FractionalDivider = ((IntegerDivider - ((uint32_t) IntegerDivider)) * 8 * (OVR8+1)) + 0.5 Where OVR8 is the \"oversampling by 8 mode\" configuration bit in the CR1 register."
            },
            "WordLength": {
                "type": "uint32_t",
                "comment": "Specifies the number of data bits transmitted or received in a frame. This parameter can be a value of @ref UART_Word_Length"
            },
            "StopBits": {
                "type": "uint32_t",
                "comment": "Specifies the number of stop bits transmitted. This parameter can be a value of @ref UART_Stop_Bits"
            },
            "Parity": {
                "type": "uint32_t",
                "comment": "Specifies the parity mode. This parameter can be a value of @ref UART_Parity @note When parity is enabled, the computed parity is inserted at the MSB position of the transmitted data (9th bit when the word length is set to 9 data bits; 8th bit when the word length is set to 8 data bits)."
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "Specifies whether the Receive or Transmit mode is enabled or disabled. This parameter can be a value of @ref UART_Mode"
            },
            "HwFlowCtl": {
                "type": "uint32_t",
                "comment": "Specifies whether the hardware flow control mode is enabled or disabled. This parameter can be a value of @ref UART_Hardware_Flow_Control"
            },
            "OverSampling": {
                "type": "uint32_t",
                "comment": "Specifies whether the Over sampling 8 is enabled or disabled, to achieve higher speed (up to fPCLK/8). This parameter can be a value of @ref UART_Over_Sampling"
            }
        },
        "UART_HandleTypeDef": {
            "Init": {
                "type": "UART_InitTypeDef",
                "comment": "UART communication parameters"
            },
            "TxXferSize": {
                "type": "uint16_t",
                "comment": "UART Tx Transfer size"
            },
            "TxXferCount": {
                "type": "__IO uint16_t",
                "comment": "UART Tx Transfer Counter"
            },
            "RxXferSize": {
                "type": "uint16_t",
                "comment": "UART Rx Transfer size"
            },
            "RxXferCount": {
                "type": "__IO uint16_t",
                "comment": "UART Rx Transfer Counter"
            },
            "ReceptionType": {
                "type": "__IO HAL_UART_RxTypeTypeDef",
                "comment": "Type of ongoing reception"
            },
            "Lock": {
                "type": "HAL_LockTypeDef",
                "comment": "Locking object"
            },
            "gState": {
                "type": "__IO HAL_UART_StateTypeDef",
                "comment": "UART state information related to global Handle management and also related to Tx operations. This parameter can be a value of @ref HAL_UART_StateTypeDef"
            },
            "RxState": {
                "type": "__IO HAL_UART_StateTypeDef",
                "comment": "UART state information related to Rx operations. This parameter can be a value of @ref HAL_UART_StateTypeDef"
            },
            "ErrorCode": {
                "type": "__IO uint32_t",
                "comment": "UART Error code"
            }
        },
        "FLASH_ProcessTypeDef": {},
        "I2C_InitTypeDef": {
            "ClockSpeed": {
                "type": "uint32_t",
                "comment": "Specifies the clock frequency. This parameter must be set to a value lower than 400kHz"
            },
            "DutyCycle": {
                "type": "uint32_t",
                "comment": "Specifies the I2C fast mode duty cycle. This parameter can be a value of @ref I2C_duty_cycle_in_fast_mode"
            },
            "OwnAddress1": {
                "type": "uint32_t",
                "comment": "Specifies the first device own address. This parameter can be a 7-bit or 10-bit address."
            },
            "AddressingMode": {
                "type": "uint32_t",
                "comment": "Specifies if 7-bit or 10-bit addressing mode is selected. This parameter can be a value of @ref I2C_addressing_mode"
            },
            "DualAddressMode": {
                "type": "uint32_t",
                "comment": "Specifies if dual addressing mode is selected. This parameter can be a value of @ref I2C_dual_addressing_mode"
            },
            "OwnAddress2": {
                "type": "uint32_t",
                "comment": "Specifies the second device own address if dual addressing mode is selected This parameter can be a 7-bit address."
            },
            "GeneralCallMode": {
                "type": "uint32_t",
                "comment": "Specifies if general call mode is selected. This parameter can be a value of @ref I2C_general_call_addressing_mode"
            },
            "NoStretchMode": {
                "type": "uint32_t",
                "comment": "Specifies if nostretch mode is selected. This parameter can be a value of @ref I2C_nostretch_mode"
            }
        },
        "EXTI_HandleTypeDef": {
            "Line": {
                "type": "uint32_t",
                "comment": "Exti line number"
            }
        },
        "EXTI_ConfigTypeDef": {
            "Line": {
                "type": "uint32_t",
                "comment": "The Exti line to be configured. This parameter can be a value of @ref EXTI_Line"
            },
            "Mode": {
                "type": "uint32_t",
                "comment": "The Exit Mode to be configured for a core. This parameter can be a combination of @ref EXTI_Mode"
            },
            "Trigger": {
                "type": "uint32_t",
                "comment": "The Exti Trigger to be configured. This parameter can be a value of @ref EXTI_Trigger"
            },
            "GPIOSel": {
                "type": "uint32_t",
                "comment": "The Exti GPIO multiplexer selection to be configured. This parameter is only possible for line 0 to 15. It can be a value of @ref EXTI_GPIOSel"
            }
        },
        "FLASH_EraseInitTypeDef": {
            "TypeErase": {
                "type": "uint32_t",
                "comment": "Mass erase or sector Erase. This parameter can be a value of @ref FLASHEx_Type_Erase"
            },
            "Banks": {
                "type": "uint32_t",
                "comment": "Select banks to erase when Mass erase is enabled. This parameter must be a value of @ref FLASHEx_Banks"
            },
            "Sector": {
                "type": "uint32_t",
                "comment": "Initial FLASH sector to erase when Mass erase is disabled This parameter must be a value of @ref FLASHEx_Sectors"
            },
            "NbSectors": {
                "type": "uint32_t",
                "comment": "Number of sectors to be erased. This parameter must be a value between 1 and (max number of sectors - value of Initial sector)"
            },
            "VoltageRange": {
                "type": "uint32_t",
                "comment": "The device voltage range which defines the erase parallelism This parameter must be a value of @ref FLASHEx_Voltage_Range"
            }
        },
        "FLASH_OBProgramInitTypeDef": {
            "OptionType": {
                "type": "uint32_t",
                "comment": "Option byte to be configured. This parameter can be a value of @ref FLASHEx_Option_Type"
            },
            "WRPState": {
                "type": "uint32_t",
                "comment": "Write protection activation or deactivation. This parameter can be a value of @ref FLASHEx_WRP_State"
            },
            "WRPSector": {
                "type": "uint32_t",
                "comment": "Specifies the sector(s) to be write protected. The value of this parameter depend on device used within the same series"
            },
            "Banks": {
                "type": "uint32_t",
                "comment": "Select banks for WRP activation/deactivation of all sectors. This parameter must be a value of @ref FLASHEx_Banks"
            },
            "RDPLevel": {
                "type": "uint32_t",
                "comment": "Set the read protection level. This parameter can be a value of @ref FLASHEx_Option_Bytes_Read_Protection"
            },
            "BORLevel": {
                "type": "uint32_t",
                "comment": "Set the BOR Level. This parameter can be a value of @ref FLASHEx_BOR_Reset_Level"
            },
            "USERConfig": {
                "type": "uint8_t",
                "comment": "Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY."
            }
        },
        "FLASH_AdvOBProgramInitTypeDef": {
            "OptionType": {
                "type": "uint32_t",
                "comment": "Option byte to be configured for extension. This parameter can be a value of @ref FLASHEx_Advanced_Option_Type"
            },
            "PCROPState": {
                "type": "uint32_t",
                "comment": "PCROP activation or deactivation. This parameter can be a value of @ref FLASHEx_PCROP_State"
            },
            "Sectors": {
                "type": "uint16_t",
                "comment": "specifies the sector(s) set for PCROP. This parameter can be a value of @ref FLASHEx_Option_Bytes_PC_ReadWrite_Protection"
            },
            "Banks": {
                "type": "uint32_t",
                "comment": "Select banks for PCROP activation/deactivation of all sectors. This parameter must be a value of @ref FLASHEx_Banks"
            },
            "SectorsBank1": {
                "type": "uint16_t",
                "comment": "Specifies the sector(s) set for PCROP for Bank1. This parameter can be a value of @ref FLASHEx_Option_Bytes_PC_ReadWrite_Protection"
            },
            "SectorsBank2": {
                "type": "uint16_t",
                "comment": "Specifies the sector(s) set for PCROP for Bank2. This parameter can be a value of @ref FLASHEx_Option_Bytes_PC_ReadWrite_Protection"
            },
            "BootConfig": {
                "type": "uint8_t",
                "comment": "Specifies Option bytes for boot config. This parameter can be a value of @ref FLASHEx_Dual_Boot"
            }
        },
        "FMC_NORSRAM_InitTypeDef": {
            "NSBank": {
                "type": "uint32_t",
                "comment": "Specifies the NORSRAM memory device that will be used. This parameter can be a value of @ref FMC_NORSRAM_Bank"
            },
            "DataAddressMux": {
                "type": "uint32_t",
                "comment": "Specifies whether the address and data values are multiplexed on the data bus or not. This parameter can be a value of @ref FMC_Data_Address_Bus_Multiplexing"
            },
            "MemoryType": {
                "type": "uint32_t",
                "comment": "Specifies the type of external memory attached to the corresponding memory device. This parameter can be a value of @ref FMC_Memory_Type"
            },
            "MemoryDataWidth": {
                "type": "uint32_t",
                "comment": "Specifies the external memory device width. This parameter can be a value of @ref FMC_NORSRAM_Data_Width"
            },
            "BurstAccessMode": {
                "type": "uint32_t",
                "comment": "Enables or disables the burst access mode for Flash memory, valid only with synchronous burst Flash memories. This parameter can be a value of @ref FMC_Burst_Access_Mode"
            },
            "WaitSignalPolarity": {
                "type": "uint32_t",
                "comment": "Specifies the wait signal polarity, valid only when accessing the Flash memory in burst mode. This parameter can be a value of @ref FMC_Wait_Signal_Polarity"
            },
            "WrapMode": {
                "type": "uint32_t",
                "comment": "Enables or disables the Wrapped burst access mode for Flash memory, valid only when accessing Flash memories in burst mode. This parameter can be a value of @ref FMC_Wrap_Mode This mode is not available for the STM32F446/467/479xx devices"
            },
            "WaitSignalActive": {
                "type": "uint32_t",
                "comment": "Specifies if the wait signal is asserted by the memory one clock cycle before the wait state or during the wait state, valid only when accessing memories in burst mode. This parameter can be a value of @ref FMC_Wait_Timing"
            },
            "WriteOperation": {
                "type": "uint32_t",
                "comment": "Enables or disables the write operation in the selected device by the FMC. This parameter can be a value of @ref FMC_Write_Operation"
            },
            "WaitSignal": {
                "type": "uint32_t",
                "comment": "Enables or disables the wait state insertion via wait signal, valid for Flash memory access in burst mode. This parameter can be a value of @ref FMC_Wait_Signal"
            },
            "ExtendedMode": {
                "type": "uint32_t",
                "comment": "Enables or disables the extended mode. This parameter can be a value of @ref FMC_Extended_Mode"
            },
            "AsynchronousWait": {
                "type": "uint32_t",
                "comment": "Enables or disables wait signal during asynchronous transfers, valid only with asynchronous Flash memories. This parameter can be a value of @ref FMC_AsynchronousWait"
            },
            "WriteBurst": {
                "type": "uint32_t",
                "comment": "Enables or disables the write burst operation. This parameter can be a value of @ref FMC_Write_Burst"
            },
            "ContinuousClock": {
                "type": "uint32_t",
                "comment": "Enables or disables the FMC clock output to external memory devices. This parameter is only enabled through the FMC_BCR1 register, and don't care through FMC_BCR2..4 registers. This parameter can be a value of @ref FMC_Continous_Clock"
            },
            "WriteFifo": {
                "type": "uint32_t",
                "comment": "Enables or disables the write FIFO used by the FMC controller. This parameter is only enabled through the FMC_BCR1 register, and don't care through FMC_BCR2..4 registers. This parameter can be a value of @ref FMC_Write_FIFO This mode is available only for the STM32F446/469/479xx devices"
            },
            "PageSize": {
                "type": "uint32_t",
                "comment": "Specifies the memory page size. This parameter can be a value of @ref FMC_Page_Size"
            }
        },
        "FMC_NORSRAM_TimingTypeDef": {
            "AddressSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the duration of the address setup time. This parameter can be a value between Min_Data = 0 and Max_Data = 15. @note This parameter is not used with synchronous NOR Flash memories."
            },
            "AddressHoldTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the duration of the address hold time. This parameter can be a value between Min_Data = 1 and Max_Data = 15. @note This parameter is not used with synchronous NOR Flash memories."
            },
            "DataSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the duration of the data setup time. This parameter can be a value between Min_Data = 1 and Max_Data = 255. @note This parameter is used for SRAMs, ROMs and asynchronous multiplexed NOR Flash memories."
            },
            "BusTurnAroundDuration": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the duration of the bus turnaround. This parameter can be a value between Min_Data = 0 and Max_Data = 15. @note This parameter is only used for multiplexed NOR Flash memories."
            },
            "CLKDivision": {
                "type": "uint32_t",
                "comment": "Defines the period of CLK clock output signal, expressed in number of HCLK cycles. This parameter can be a value between Min_Data = 2 and Max_Data = 16. @note This parameter is not used for asynchronous NOR Flash, SRAM or ROM accesses."
            },
            "DataLatency": {
                "type": "uint32_t",
                "comment": "Defines the number of memory clock cycles to issue to the memory before getting the first data. The parameter value depends on the memory type as shown below: - It must be set to 0 in case of a CRAM - It is don't care in asynchronous NOR, SRAM or ROM accesses - It may assume a value between Min_Data = 2 and Max_Data = 17 in NOR Flash memories with synchronous burst mode enable"
            },
            "AccessMode": {
                "type": "uint32_t",
                "comment": "Specifies the asynchronous access mode. This parameter can be a value of @ref FMC_Access_Mode"
            }
        },
        "FMC_NAND_InitTypeDef": {
            "NandBank": {
                "type": "uint32_t",
                "comment": "Specifies the NAND memory device that will be used. This parameter can be a value of @ref FMC_NAND_Bank"
            },
            "Waitfeature": {
                "type": "uint32_t",
                "comment": "Enables or disables the Wait feature for the NAND Memory device. This parameter can be any value of @ref FMC_Wait_feature"
            },
            "MemoryDataWidth": {
                "type": "uint32_t",
                "comment": "Specifies the external memory device width. This parameter can be any value of @ref FMC_NAND_Data_Width"
            },
            "EccComputation": {
                "type": "uint32_t",
                "comment": "Enables or disables the ECC computation. This parameter can be any value of @ref FMC_ECC"
            },
            "ECCPageSize": {
                "type": "uint32_t",
                "comment": "Defines the page size for the extended ECC. This parameter can be any value of @ref FMC_ECC_Page_Size"
            },
            "TCLRSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the delay between CLE low and RE low. This parameter can be a value between Min_Data = 0 and Max_Data = 255"
            },
            "TARSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the delay between ALE low and RE low. This parameter can be a number between Min_Data = 0 and Max_Data = 255"
            }
        },
        "FMC_NAND_PCC_TimingTypeDef": {
            "SetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to setup address before the command assertion for NAND-Flash read or write access to common/Attribute or I/O memory space (depending on the memory space timing to be configured). This parameter can be a value between Min_Data = 0 and Max_Data = 254"
            },
            "WaitSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the minimum number of HCLK cycles to assert the command for NAND-Flash read or write access to common/Attribute or I/O memory space (depending on the memory space timing to be configured). This parameter can be a number between Min_Data = 0 and Max_Data = 254"
            },
            "HoldSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK clock cycles to hold address (and data for write access) after the command de-assertion for NAND-Flash read or write access to common/Attribute or I/O memory space (depending on the memory space timing to be configured). This parameter can be a number between Min_Data = 0 and Max_Data = 254"
            },
            "HiZSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK clock cycles during which the data bus is kept in HiZ after the start of a NAND-Flash write access to common/Attribute or I/O memory space (depending on the memory space timing to be configured). This parameter can be a number between Min_Data = 0 and Max_Data = 254"
            }
        },
        "FMC_PCCARD_InitTypeDef": {
            "Waitfeature": {
                "type": "uint32_t",
                "comment": "Enables or disables the Wait feature for the PCCARD Memory device. This parameter can be any value of @ref FMC_Wait_feature"
            },
            "TCLRSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the delay between CLE low and RE low. This parameter can be a value between Min_Data = 0 and Max_Data = 255"
            },
            "TARSetupTime": {
                "type": "uint32_t",
                "comment": "Defines the number of HCLK cycles to configure the delay between ALE low and RE low. This parameter can be a number between Min_Data = 0 and Max_Data = 255"
            }
        },
        "FMC_SDRAM_InitTypeDef": {
            "SDBank": {
                "type": "uint32_t",
                "comment": "Specifies the SDRAM memory device that will be used. This parameter can be a value of @ref FMC_SDRAM_Bank"
            },
            "ColumnBitsNumber": {
                "type": "uint32_t",
                "comment": "Defines the number of bits of column address. This parameter can be a value of @ref FMC_SDRAM_Column_Bits_number."
            },
            "RowBitsNumber": {
                "type": "uint32_t",
                "comment": "Defines the number of bits of column address. This parameter can be a value of @ref FMC_SDRAM_Row_Bits_number."
            },
            "MemoryDataWidth": {
                "type": "uint32_t",
                "comment": "Defines the memory device width. This parameter can be a value of @ref FMC_SDRAM_Memory_Bus_Width."
            },
            "InternalBankNumber": {
                "type": "uint32_t",
                "comment": "Defines the number of the device's internal banks. This parameter can be of @ref FMC_SDRAM_Internal_Banks_Number."
            },
            "CASLatency": {
                "type": "uint32_t",
                "comment": "Defines the SDRAM CAS latency in number of memory clock cycles. This parameter can be a value of @ref FMC_SDRAM_CAS_Latency."
            },
            "WriteProtection": {
                "type": "uint32_t",
                "comment": "Enables the SDRAM device to be accessed in write mode. This parameter can be a value of @ref FMC_SDRAM_Write_Protection."
            },
            "SDClockPeriod": {
                "type": "uint32_t",
                "comment": "Define the SDRAM Clock Period for both SDRAM devices and they allow to disable the clock before changing frequency. This parameter can be a value of @ref FMC_SDRAM_Clock_Period."
            },
            "ReadBurst": {
                "type": "uint32_t",
                "comment": "This bit enable the SDRAM controller to anticipate the next read commands during the CAS latency and stores data in the Read FIFO. This parameter can be a value of @ref FMC_SDRAM_Read_Burst."
            },
            "ReadPipeDelay": {
                "type": "uint32_t",
                "comment": "Define the delay in system clock cycles on read data path. This parameter can be a value of @ref FMC_SDRAM_Read_Pipe_Delay."
            }
        },
        "FMC_SDRAM_TimingTypeDef": {
            "LoadToActiveDelay": {
                "type": "uint32_t",
                "comment": "Defines the delay between a Load Mode Register command and an active or Refresh command in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            },
            "ExitSelfRefreshDelay": {
                "type": "uint32_t",
                "comment": "Defines the delay from releasing the self refresh command to issuing the Activate command in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            },
            "SelfRefreshTime": {
                "type": "uint32_t",
                "comment": "Defines the minimum Self Refresh period in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            },
            "RowCycleDelay": {
                "type": "uint32_t",
                "comment": "Defines the delay between the Refresh command and the Activate command and the delay between two consecutive Refresh commands in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            },
            "WriteRecoveryTime": {
                "type": "uint32_t",
                "comment": "Defines the Write recovery Time in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            },
            "RPDelay": {
                "type": "uint32_t",
                "comment": "Defines the delay between a Precharge Command and an other command in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            },
            "RCDDelay": {
                "type": "uint32_t",
                "comment": "Defines the delay between the Activate Command and a Read/Write command in number of memory clock cycles. This parameter can be a value between Min_Data = 1 and Max_Data = 16"
            }
        },
        "FMC_SDRAM_CommandTypeDef": {
            "CommandMode": {
                "type": "uint32_t",
                "comment": "Defines the command issued to the SDRAM device. This parameter can be a value of @ref FMC_SDRAM_Command_Mode."
            },
            "CommandTarget": {
                "type": "uint32_t",
                "comment": "Defines which device (1 or 2) the command will be issued to. This parameter can be a value of @ref FMC_SDRAM_Command_Target."
            },
            "AutoRefreshNumber": {
                "type": "uint32_t",
                "comment": "Defines the number of consecutive auto refresh command issued in auto refresh mode. This parameter can be a value between Min_Data = 1 and Max_Data = 15"
            },
            "ModeRegisterDefinition": {
                "type": "uint32_t",
                "comment": "Defines the SDRAM Mode register content"
            }
        },
        "RCC_OscInitTypeDef": {
            "OscillatorType": {
                "type": "uint32_t",
                "comment": "The oscillators to be configured. This parameter can be a value of @ref RCC_Oscillator_Type"
            },
            "HSEState": {
                "type": "uint32_t",
                "comment": "The new state of the HSE. This parameter can be a value of @ref RCC_HSE_Config"
            },
            "LSEState": {
                "type": "uint32_t",
                "comment": "The new state of the LSE. This parameter can be a value of @ref RCC_LSE_Config"
            },
            "HSIState": {
                "type": "uint32_t",
                "comment": "The new state of the HSI. This parameter can be a value of @ref RCC_HSI_Config"
            },
            "HSICalibrationValue": {
                "type": "uint32_t",
                "comment": "The HSI calibration trimming value (default is RCC_HSICALIBRATION_DEFAULT). This parameter must be a number between Min_Data = 0x00 and Max_Data = 0x1F"
            },
            "LSIState": {
                "type": "uint32_t",
                "comment": "The new state of the LSI. This parameter can be a value of @ref RCC_LSI_Config"
            },
            "PLL": {
                "type": "RCC_PLLInitTypeDef",
                "comment": "PLL structure parameters"
            }
        },
        "RCC_ClkInitTypeDef": {
            "ClockType": {
                "type": "uint32_t",
                "comment": "The clock to be configured. This parameter can be a value of @ref RCC_System_Clock_Type"
            },
            "SYSCLKSource": {
                "type": "uint32_t",
                "comment": "The clock source (SYSCLKS) used as system clock. This parameter can be a value of @ref RCC_System_Clock_Source"
            },
            "AHBCLKDivider": {
                "type": "uint32_t",
                "comment": "The AHB clock (HCLK) divider. This clock is derived from the system clock (SYSCLK). This parameter can be a value of @ref RCC_AHB_Clock_Source"
            },
            "APB1CLKDivider": {
                "type": "uint32_t",
                "comment": "The APB1 clock (PCLK1) divider. This clock is derived from the AHB clock (HCLK). This parameter can be a value of @ref RCC_APB1_APB2_Clock_Source"
            },
            "APB2CLKDivider": {
                "type": "uint32_t",
                "comment": "The APB2 clock (PCLK2) divider. This clock is derived from the AHB clock (HCLK). This parameter can be a value of @ref RCC_APB1_APB2_Clock_Source"
            }
        }
    },
    "enum": {
        "HAL_LTDC_StateTypeDef": {
            "HAL_LTDC_STATE_RESET": {
                "value": "0x00",
                "description": "LTDC not yet initialized or disabled"
            },
            "HAL_LTDC_STATE_READY": {
                "value": "0x01",
                "description": "LTDC initialized and ready for use"
            },
            "HAL_LTDC_STATE_BUSY": {
                "value": "0x02",
                "description": "LTDC internal process is ongoing"
            },
            "HAL_LTDC_STATE_TIMEOUT": {
                "value": "0x03",
                "description": "LTDC Timeout state"
            }
        },
        "HAL_LTDC_CallbackIDTypeDef": {
            "HAL_LTDC_MSPINIT_CB_ID": {
                "value": "0x00",
                "description": "LTDC MspInit callback ID"
            },
            "HAL_LTDC_MSPDEINIT_CB_ID": {
                "value": "0x01",
                "description": "LTDC MspDeInit callback ID"
            },
            "HAL_LTDC_LINE_EVENT_CB_ID": {
                "value": "0x02",
                "description": "LTDC Line Event Callback ID"
            },
            "HAL_LTDC_RELOAD_EVENT_CB_ID": {
                "value": "0x03",
                "description": "LTDC Reload Callback ID"
            }
        },
        "HAL_DMA_MemoryTypeDef": {
            "MEMORY0": {
                "value": "0x00",
                "description": "Memory 0"
            }
        },
        "HAL_DMA_StateTypeDef": {
            "HAL_DMA_STATE_RESET": {
                "value": "0x00",
                "description": "DMA not yet initialized or disabled"
            },
            "HAL_DMA_STATE_READY": {
                "value": "0x01",
                "description": "DMA initialized and ready for use"
            },
            "HAL_DMA_STATE_BUSY": {
                "value": "0x02",
                "description": "DMA process is ongoing"
            },
            "HAL_DMA_STATE_TIMEOUT": {
                "value": "0x03",
                "description": "DMA timeout state"
            },
            "HAL_DMA_STATE_ERROR": {
                "value": "0x04",
                "description": "DMA error state"
            },
            "HAL_DMA_STATE_ABORT": {
                "value": "0x05",
                "description": "DMA Abort state"
            }
        },
        "HAL_DMA_LevelCompleteTypeDef": {
            "HAL_DMA_FULL_TRANSFER": {
                "value": "0x00",
                "description": "Full transfer"
            }
        },
        "HAL_DMA_CallbackIDTypeDef": {
            "HAL_DMA_XFER_CPLT_CB_ID": {
                "value": "0x00",
                "description": "Full transfer"
            },
            "HAL_DMA_XFER_HALFCPLT_CB_ID": {
                "value": "0x01",
                "description": "Half Transfer"
            },
            "HAL_DMA_XFER_M1CPLT_CB_ID": {
                "value": "0x02",
                "description": "M1 Full Transfer"
            },
            "HAL_DMA_XFER_M1HALFCPLT_CB_ID": {
                "value": "0x03",
                "description": "M1 Half Transfer"
            },
            "HAL_DMA_XFER_ERROR_CB_ID": {
                "value": "0x04",
                "description": "Error"
            },
            "HAL_DMA_XFER_ABORT_CB_ID": {
                "value": "0x05",
                "description": "Abort"
            }
        },
        "HAL_CAN_StateTypeDef": {
            "HAL_CAN_STATE_RESET": {
                "value": "0x00",
                "description": "CAN not yet initialized or disabled"
            },
            "HAL_CAN_STATE_READY": {
                "value": "0x01",
                "description": "CAN initialized and ready for use"
            },
            "HAL_CAN_STATE_LISTENING": {
                "value": "0x02",
                "description": "CAN receive process is ongoing"
            },
            "HAL_CAN_STATE_SLEEP_PENDING": {
                "value": "0x03",
                "description": "CAN sleep request is pending"
            },
            "HAL_CAN_STATE_SLEEP_ACTIVE": {
                "value": "0x04",
                "description": "CAN sleep mode is active"
            }
        },
        "HAL_CAN_CallbackIDTypeDef": {
            "HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID": {
                "value": "0x00",
                "description": "CAN Tx Mailbox 0 complete callback ID"
            },
            "HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID": {
                "value": "0x01",
                "description": "CAN Tx Mailbox 1 complete callback ID"
            },
            "HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID": {
                "value": "0x02",
                "description": "CAN Tx Mailbox 2 complete callback ID"
            },
            "HAL_CAN_TX_MAILBOX0_ABORT_CB_ID": {
                "value": "0x03",
                "description": "CAN Tx Mailbox 0 abort callback ID"
            },
            "HAL_CAN_TX_MAILBOX1_ABORT_CB_ID": {
                "value": "0x04",
                "description": "CAN Tx Mailbox 1 abort callback ID"
            },
            "HAL_CAN_TX_MAILBOX2_ABORT_CB_ID": {
                "value": "0x05",
                "description": "CAN Tx Mailbox 2 abort callback ID"
            },
            "HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID": {
                "value": "0x06",
                "description": "CAN Rx FIFO 0 message pending callback ID"
            },
            "HAL_CAN_RX_FIFO0_FULL_CB_ID": {
                "value": "0x07",
                "description": "CAN Rx FIFO 0 full callback ID"
            },
            "HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID": {
                "value": "0x08",
                "description": "CAN Rx FIFO 1 message pending callback ID"
            },
            "HAL_CAN_RX_FIFO1_FULL_CB_ID": {
                "value": "0x09",
                "description": "CAN Rx FIFO 1 full callback ID"
            },
            "HAL_CAN_SLEEP_CB_ID": {
                "value": "0x0A",
                "description": "CAN Sleep callback ID"
            },
            "HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID": {
                "value": "0x0B",
                "description": "CAN Wake Up from Rx msg callback ID"
            },
            "HAL_CAN_ERROR_CB_ID": {
                "value": "0x0C",
                "description": "CAN Error callback ID"
            },
            "HAL_CAN_MSPINIT_CB_ID": {
                "value": "0x0D",
                "description": "CAN MspInit callback ID"
            },
            "HAL_CAN_MSPDEINIT_CB_ID": {
                "value": "0x0E",
                "description": "CAN MspDeInit callback ID"
            }
        },
        "HAL_TickFreqTypeDef": {
            "HAL_TICK_FREQ_10HZ         = 100U": {
                "value": null,
                "description": null
            },
            "HAL_TICK_FREQ_100HZ        = 10U": {
                "value": null,
                "description": null
            },
            "HAL_TICK_FREQ_1KHZ         = 1U": {
                "value": null,
                "description": null
            }
        },
        "HAL_DMA2D_StateTypeDef": {
            "HAL_DMA2D_STATE_RESET": {
                "value": "0x00",
                "description": "DMA2D not yet initialized or disabled"
            },
            "HAL_DMA2D_STATE_READY": {
                "value": "0x01",
                "description": "Peripheral Initialized and ready for use"
            },
            "HAL_DMA2D_STATE_BUSY": {
                "value": "0x02",
                "description": "An internal process is ongoing"
            },
            "HAL_DMA2D_STATE_TIMEOUT": {
                "value": "0x03",
                "description": "Timeout state"
            },
            "HAL_DMA2D_STATE_ERROR": {
                "value": "0x04",
                "description": "DMA2D state error"
            }
        },
        "HAL_DMA2D_CallbackIDTypeDef": {
            "HAL_DMA2D_MSPINIT_CB_ID": {
                "value": "0x00",
                "description": "DMA2D MspInit callback ID"
            },
            "HAL_DMA2D_MSPDEINIT_CB_ID": {
                "value": "0x01",
                "description": "DMA2D MspDeInit callback ID"
            },
            "HAL_DMA2D_TRANSFERCOMPLETE_CB_ID": {
                "value": "0x02",
                "description": "DMA2D transfer complete callback ID"
            },
            "HAL_DMA2D_TRANSFERERROR_CB_ID": {
                "value": "0x03",
                "description": "DMA2D transfer error callback ID"
            },
            "HAL_DMA2D_LINEEVENT_CB_ID": {
                "value": "0x04",
                "description": "DMA2D line event callback ID"
            },
            "HAL_DMA2D_CLUTLOADINGCPLT_CB_ID": {
                "value": "0x05",
                "description": "DMA2D CLUT loading completion callback ID"
            }
        },
        "GPIO_PinState": {
            "GPIO_PIN_RESET = 0": {
                "value": null,
                "description": null
            }
        },
        "HAL_CRC_StateTypeDef": {
            "HAL_CRC_STATE_RESET": {
                "value": "0x00",
                "description": "CRC not yet initialized or disabled"
            },
            "HAL_CRC_STATE_READY": {
                "value": "0x01",
                "description": "CRC initialized and ready for use"
            },
            "HAL_CRC_STATE_BUSY": {
                "value": "0x02",
                "description": "CRC internal process is ongoing"
            },
            "HAL_CRC_STATE_TIMEOUT": {
                "value": "0x03",
                "description": "CRC timeout state"
            }
        },
        "HAL_DSI_StateTypeDef": {
            "HAL_DSI_STATE_RESET": {
                "value": "0x00",
                "description": null
            },
            "HAL_DSI_STATE_READY": {
                "value": "0x01",
                "description": null
            },
            "HAL_DSI_STATE_ERROR": {
                "value": "0x02",
                "description": null
            },
            "HAL_DSI_STATE_BUSY": {
                "value": "0x03",
                "description": null
            },
            "HAL_DSI_STATE_RESET   = 0x00U": {
                "value": null,
                "description": null
            },
            "HAL_DSI_STATE_READY   = 0x01U": {
                "value": null,
                "description": null
            },
            "HAL_DSI_STATE_ERROR   = 0x02U": {
                "value": null,
                "description": null
            },
            "HAL_DSI_STATE_BUSY    = 0x03U": {
                "value": null,
                "description": null
            }
        },
        "HAL_DSI_CallbackIDTypeDef": {
            "HAL_DSI_MSPINIT_CB_ID": {
                "value": "0x00",
                "description": "DSI MspInit callback ID"
            },
            "HAL_DSI_MSPDEINIT_CB_ID": {
                "value": "0x01",
                "description": "DSI MspDeInit callback ID"
            },
            "HAL_DSI_TEARING_EFFECT_CB_ID": {
                "value": "0x02",
                "description": "DSI Tearing Effect Callback ID"
            },
            "HAL_DSI_ENDOF_REFRESH_CB_ID": {
                "value": "0x03",
                "description": "DSI End Of Refresh Callback ID"
            }
        },
        "HAL_SDRAM_StateTypeDef": {
            "HAL_SDRAM_STATE_RESET": {
                "value": "0x00",
                "description": "SDRAM not yet initialized or disabled"
            },
            "HAL_SDRAM_STATE_READY": {
                "value": "0x01",
                "description": "SDRAM initialized and ready for use"
            },
            "HAL_SDRAM_STATE_BUSY": {
                "value": "0x02",
                "description": "SDRAM internal process is ongoing"
            },
            "HAL_SDRAM_STATE_ERROR": {
                "value": "0x03",
                "description": "SDRAM error state"
            },
            "HAL_SDRAM_STATE_WRITE_PROTECTED": {
                "value": "0x04",
                "description": "SDRAM device write protected"
            }
        },
        "HAL_SDRAM_CallbackIDTypeDef": {
            "HAL_SDRAM_MSP_INIT_CB_ID": {
                "value": "0x00",
                "description": "SDRAM MspInit Callback ID"
            },
            "HAL_SDRAM_MSP_DEINIT_CB_ID": {
                "value": "0x01",
                "description": "SDRAM MspDeInit Callback ID"
            },
            "HAL_SDRAM_REFRESH_ERR_CB_ID": {
                "value": "0x02",
                "description": "SDRAM Refresh Error Callback ID"
            },
            "HAL_SDRAM_DMA_XFER_CPLT_CB_ID": {
                "value": "0x03",
                "description": "SDRAM DMA Xfer Complete Callback ID"
            }
        },
        "HAL_SPI_StateTypeDef": {
            "HAL_SPI_STATE_RESET": {
                "value": "0x00",
                "description": "Peripheral not Initialized"
            },
            "HAL_SPI_STATE_READY": {
                "value": "0x01",
                "description": "Peripheral Initialized and ready for use"
            },
            "HAL_SPI_STATE_BUSY": {
                "value": "0x02",
                "description": "an internal process is ongoing"
            },
            "HAL_SPI_STATE_BUSY_TX": {
                "value": "0x03",
                "description": "Data Transmission process is ongoing"
            },
            "HAL_SPI_STATE_BUSY_RX": {
                "value": "0x04",
                "description": "Data Reception process is ongoing"
            },
            "HAL_SPI_STATE_BUSY_TX_RX": {
                "value": "0x05",
                "description": "Data Transmission and Reception process is ongoing"
            },
            "HAL_SPI_STATE_ERROR": {
                "value": "0x06",
                "description": "SPI error state"
            }
        },
        "HAL_SPI_CallbackIDTypeDef": {
            "HAL_SPI_TX_COMPLETE_CB_ID": {
                "value": "0x00",
                "description": "SPI Tx Completed callback ID"
            },
            "HAL_SPI_RX_COMPLETE_CB_ID": {
                "value": "0x01",
                "description": "SPI Rx Completed callback ID"
            },
            "HAL_SPI_TX_RX_COMPLETE_CB_ID": {
                "value": "0x02",
                "description": "SPI TxRx Completed callback ID"
            },
            "HAL_SPI_TX_HALF_COMPLETE_CB_ID": {
                "value": "0x03",
                "description": "SPI Tx Half Completed callback ID"
            },
            "HAL_SPI_RX_HALF_COMPLETE_CB_ID": {
                "value": "0x04",
                "description": "SPI Rx Half Completed callback ID"
            },
            "HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID": {
                "value": "0x05",
                "description": "SPI TxRx Half Completed callback ID"
            },
            "HAL_SPI_ERROR_CB_ID": {
                "value": "0x06",
                "description": "SPI Error callback ID"
            },
            "HAL_SPI_ABORT_CB_ID": {
                "value": "0x07",
                "description": "SPI Abort callback ID"
            },
            "HAL_SPI_MSPINIT_CB_ID": {
                "value": "0x08",
                "description": "SPI Msp Init callback ID"
            }
        },
        "HAL_TIM_StateTypeDef": {
            "HAL_TIM_STATE_RESET": {
                "value": "0x00",
                "description": "Peripheral not yet initialized or disabled"
            },
            "HAL_TIM_STATE_READY": {
                "value": "0x01",
                "description": "Peripheral Initialized and ready for use"
            },
            "HAL_TIM_STATE_BUSY": {
                "value": "0x02",
                "description": "An internal process is ongoing"
            },
            "HAL_TIM_STATE_TIMEOUT": {
                "value": "0x03",
                "description": "Timeout state"
            }
        },
        "HAL_TIM_ChannelStateTypeDef": {
            "HAL_TIM_CHANNEL_STATE_RESET": {
                "value": "0x00",
                "description": "TIM Channel initial state"
            },
            "HAL_TIM_CHANNEL_STATE_READY": {
                "value": "0x01",
                "description": "TIM Channel ready for use"
            },
            "HAL_TIM_CHANNEL_STATE_BUSY": {
                "value": "0x02",
                "description": "An internal process is ongoing on the TIM channel"
            }
        },
        "HAL_TIM_DMABurstStateTypeDef": {
            "HAL_DMA_BURST_STATE_RESET": {
                "value": "0x00",
                "description": "DMA Burst initial state"
            },
            "HAL_DMA_BURST_STATE_READY": {
                "value": "0x01",
                "description": "DMA Burst ready for use"
            },
            "HAL_DMA_BURST_STATE_BUSY": {
                "value": "0x02",
                "description": "Ongoing DMA Burst"
            }
        },
        "HAL_TIM_ActiveChannel": {
            "HAL_TIM_ACTIVE_CHANNEL_1": {
                "value": "0x01",
                "description": "The active channel is 1"
            },
            "HAL_TIM_ACTIVE_CHANNEL_2": {
                "value": "0x02",
                "description": "The active channel is 2"
            },
            "HAL_TIM_ACTIVE_CHANNEL_3": {
                "value": "0x04",
                "description": "The active channel is 3"
            },
            "HAL_TIM_ACTIVE_CHANNEL_4": {
                "value": "0x08",
                "description": "The active channel is 4"
            }
        },
        "HAL_TIM_CallbackIDTypeDef": {
            "HAL_TIM_BASE_MSPINIT_CB_ID              = 0x00U   /*!< TIM Base MspInit Callback ID                              */": {
                "value": null,
                "description": null
            },
            "": {
                "value": null,
                "description": null
            }
        },
        "HAL_UART_StateTypeDef": {
            "HAL_UART_STATE_RESET": {
                "value": "0x00",
                "description": "Peripheral is not yet Initialized Value is allowed for gState and RxState"
            },
            "HAL_UART_STATE_READY": {
                "value": "0x20",
                "description": "Peripheral Initialized and ready for use Value is allowed for gState and RxState"
            },
            "HAL_UART_STATE_BUSY": {
                "value": "0x24",
                "description": "an internal process is ongoing Value is allowed for gState only"
            },
            "HAL_UART_STATE_BUSY_TX": {
                "value": "0x21",
                "description": "Data Transmission process is ongoing Value is allowed for gState only"
            },
            "HAL_UART_STATE_BUSY_RX": {
                "value": "0x22",
                "description": "Data Reception process is ongoing Value is allowed for RxState only"
            },
            "HAL_UART_STATE_BUSY_TX_RX": {
                "value": "0x23",
                "description": "Data Transmission and Reception process is ongoing Not to be used for neither gState nor RxState. Value is result of combination (Or) between gState and RxState values"
            },
            "HAL_UART_STATE_TIMEOUT": {
                "value": "0xA0",
                "description": "Timeout state Value is allowed for gState only"
            }
        },
        "HAL_UART_CallbackIDTypeDef": {
            "HAL_UART_TX_HALFCOMPLETE_CB_ID": {
                "value": "0x00",
                "description": "UART Tx Half Complete Callback ID"
            },
            "HAL_UART_TX_COMPLETE_CB_ID": {
                "value": "0x01",
                "description": "UART Tx Complete Callback ID"
            },
            "HAL_UART_RX_HALFCOMPLETE_CB_ID": {
                "value": "0x02",
                "description": "UART Rx Half Complete Callback ID"
            },
            "HAL_UART_RX_COMPLETE_CB_ID": {
                "value": "0x03",
                "description": "UART Rx Complete Callback ID"
            },
            "HAL_UART_ERROR_CB_ID": {
                "value": "0x04",
                "description": "UART Error Callback ID"
            },
            "HAL_UART_ABORT_COMPLETE_CB_ID": {
                "value": "0x05",
                "description": "UART Abort Complete Callback ID"
            },
            "HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID": {
                "value": "0x06",
                "description": "UART Abort Transmit Complete Callback ID"
            },
            "HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID": {
                "value": "0x07",
                "description": "UART Abort Receive Complete Callback ID"
            },
            "HAL_UART_WAKEUP_CB_ID": {
                "value": "0x08",
                "description": "UART Wakeup Callback ID"
            },
            "HAL_UART_MSPINIT_CB_ID": {
                "value": "0x0B",
                "description": "UART MspInit callback ID"
            }
        },
        "FLASH_ProcedureTypeDef": {
            "FLASH_PROC_NONE = 0U": {
                "value": null,
                "description": null
            },
            "FLASH_PROC_SECTERASE": {
                "value": null,
                "description": null
            },
            "FLASH_PROC_MASSERASE": {
                "value": null,
                "description": null
            }
        },
        "HAL_I2C_StateTypeDef": {
            "HAL_I2C_STATE_RESET": {
                "value": "0x00",
                "description": "Peripheral is not yet Initialized"
            },
            "HAL_I2C_STATE_READY": {
                "value": "0x20",
                "description": "Peripheral Initialized and ready for use"
            },
            "HAL_I2C_STATE_BUSY": {
                "value": "0x24",
                "description": "An internal process is ongoing"
            },
            "HAL_I2C_STATE_BUSY_TX": {
                "value": "0x21",
                "description": "Data Transmission process is ongoing"
            },
            "HAL_I2C_STATE_BUSY_RX": {
                "value": "0x22",
                "description": "Data Reception process is ongoing"
            },
            "HAL_I2C_STATE_LISTEN": {
                "value": "0x28",
                "description": "Address Listen Mode is ongoing"
            },
            "HAL_I2C_STATE_BUSY_TX_LISTEN": {
                "value": "0x29",
                "description": "Address Listen Mode and Data Transmission process is ongoing"
            },
            "HAL_I2C_STATE_BUSY_RX_LISTEN": {
                "value": "0x2A",
                "description": "Address Listen Mode and Data Reception process is ongoing"
            },
            "HAL_I2C_STATE_ABORT": {
                "value": "0x60",
                "description": "Abort user request ongoing"
            },
            "HAL_I2C_STATE_TIMEOUT": {
                "value": "0xA0",
                "description": "Timeout state"
            }
        },
        "HAL_I2C_ModeTypeDef": {
            "HAL_I2C_MODE_NONE": {
                "value": "0x00",
                "description": "No I2C communication on going"
            },
            "HAL_I2C_MODE_MASTER": {
                "value": "0x10",
                "description": "I2C communication is in Master Mode"
            },
            "HAL_I2C_MODE_SLAVE": {
                "value": "0x20",
                "description": "I2C communication is in Slave Mode"
            }
        },
        "HAL_I2C_CallbackIDTypeDef": {
            "HAL_I2C_MASTER_TX_COMPLETE_CB_ID": {
                "value": "0x00",
                "description": "I2C Master Tx Transfer completed callback ID"
            },
            "HAL_I2C_MASTER_RX_COMPLETE_CB_ID": {
                "value": "0x01",
                "description": "I2C Master Rx Transfer completed callback ID"
            },
            "HAL_I2C_SLAVE_TX_COMPLETE_CB_ID": {
                "value": "0x02",
                "description": "I2C Slave Tx Transfer completed callback ID"
            },
            "HAL_I2C_SLAVE_RX_COMPLETE_CB_ID": {
                "value": "0x03",
                "description": "I2C Slave Rx Transfer completed callback ID"
            },
            "HAL_I2C_LISTEN_COMPLETE_CB_ID": {
                "value": "0x04",
                "description": "I2C Listen Complete callback ID"
            },
            "HAL_I2C_MEM_TX_COMPLETE_CB_ID": {
                "value": "0x05",
                "description": "I2C Memory Tx Transfer callback ID"
            },
            "HAL_I2C_MEM_RX_COMPLETE_CB_ID": {
                "value": "0x06",
                "description": "I2C Memory Rx Transfer completed callback ID"
            },
            "HAL_I2C_ERROR_CB_ID": {
                "value": "0x07",
                "description": "I2C Error callback ID"
            },
            "HAL_I2C_ABORT_CB_ID": {
                "value": "0x08",
                "description": "I2C Abort callback ID"
            },
            "HAL_I2C_MSPINIT_CB_ID": {
                "value": "0x09",
                "description": "I2C Msp Init callback ID"
            }
        },
        "EXTI_CallbackIDTypeDef": null,
        "HAL_StatusTypeDef": {
            "HAL_OK": {
                "value": "0x00",
                "description": null
            },
            "HAL_ERROR": {
                "value": "0x01",
                "description": null
            },
            "HAL_BUSY": {
                "value": "0x02",
                "description": null
            },
            "HAL_OK       = 0x00U": {
                "value": null,
                "description": null
            },
            "HAL_ERROR    = 0x01U": {
                "value": null,
                "description": null
            },
            "HAL_BUSY     = 0x02U": {
                "value": null,
                "description": null
            }
        },
        "HAL_LockTypeDef": {
            "HAL_UNLOCKED": {
                "value": "0x00",
                "description": null
            },
            "HAL_UNLOCKED = 0x00U": {
                "value": null,
                "description": null
            }
        }
    },
    "uint32_t": {
        "HAL_UART_RxTypeTypeDef": null
    }
}